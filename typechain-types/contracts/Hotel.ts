/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HotelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ROOMS_MAX_COUNT"
      | "bookings"
      | "checkIfUserBooked"
      | "checkOut"
      | "getAvailableRooms"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "roomCost"
      | "roomsAvailable"
      | "sendBookRequest"
      | "transferOwnership"
      | "updateRoomCost"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BookingSendRequest"
      | "CheckIfUserBooked"
      | "CheckedOut"
      | "Initialized"
      | "OwnershipTransferred"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ROOMS_MAX_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bookings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfUserBooked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "checkOut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailableRooms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roomCost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roomsAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendBookRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoomCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ROOMS_MAX_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkIfUserBooked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableRooms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roomCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roomsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendBookRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoomCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BookingSendRequestEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckIfUserBookedEvent {
  export type InputTuple = [booked: boolean];
  export type OutputTuple = [booked: boolean];
  export interface OutputObject {
    booked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckedOutEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Hotel extends BaseContract {
  connect(runner?: ContractRunner | null): Hotel;
  waitForDeployment(): Promise<this>;

  interface: HotelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ROOMS_MAX_COUNT: TypedContractMethod<[], [bigint], "view">;

  bookings: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { user: string; reservedFunds: bigint }],
    "view"
  >;

  checkIfUserBooked: TypedContractMethod<[], [boolean], "view">;

  checkOut: TypedContractMethod<[], [void], "nonpayable">;

  getAvailableRooms: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_roomCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roomCost: TypedContractMethod<[], [bigint], "view">;

  roomsAvailable: TypedContractMethod<[], [bigint], "view">;

  sendBookRequest: TypedContractMethod<[], [void], "payable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRoomCost: TypedContractMethod<
    [_roomCost: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ROOMS_MAX_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bookings"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { user: string; reservedFunds: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkIfUserBooked"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkOut"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAvailableRooms"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_roomCost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roomCost"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "roomsAvailable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendBookRequest"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRoomCost"
  ): TypedContractMethod<[_roomCost: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BookingSendRequest"
  ): TypedContractEvent<
    BookingSendRequestEvent.InputTuple,
    BookingSendRequestEvent.OutputTuple,
    BookingSendRequestEvent.OutputObject
  >;
  getEvent(
    key: "CheckIfUserBooked"
  ): TypedContractEvent<
    CheckIfUserBookedEvent.InputTuple,
    CheckIfUserBookedEvent.OutputTuple,
    CheckIfUserBookedEvent.OutputObject
  >;
  getEvent(
    key: "CheckedOut"
  ): TypedContractEvent<
    CheckedOutEvent.InputTuple,
    CheckedOutEvent.OutputTuple,
    CheckedOutEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "BookingSendRequest(address,uint256)": TypedContractEvent<
      BookingSendRequestEvent.InputTuple,
      BookingSendRequestEvent.OutputTuple,
      BookingSendRequestEvent.OutputObject
    >;
    BookingSendRequest: TypedContractEvent<
      BookingSendRequestEvent.InputTuple,
      BookingSendRequestEvent.OutputTuple,
      BookingSendRequestEvent.OutputObject
    >;

    "CheckIfUserBooked(bool)": TypedContractEvent<
      CheckIfUserBookedEvent.InputTuple,
      CheckIfUserBookedEvent.OutputTuple,
      CheckIfUserBookedEvent.OutputObject
    >;
    CheckIfUserBooked: TypedContractEvent<
      CheckIfUserBookedEvent.InputTuple,
      CheckIfUserBookedEvent.OutputTuple,
      CheckIfUserBookedEvent.OutputObject
    >;

    "CheckedOut(address)": TypedContractEvent<
      CheckedOutEvent.InputTuple,
      CheckedOutEvent.OutputTuple,
      CheckedOutEvent.OutputObject
    >;
    CheckedOut: TypedContractEvent<
      CheckedOutEvent.InputTuple,
      CheckedOutEvent.OutputTuple,
      CheckedOutEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Withdraw(uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
